---
title: "Bioinformatics Tutorial Part 1"
author: "Vera Fl√ºck"
date: "2024/04/24"
license:  "This file is licensed under CC BY 4.0"
format:
  html:
    code-fold: true
categories:
  - code
  - R
  - Tutorial
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Bioinformatics self study

With this series of scripts you can work at your own pace to try out some of the code that is needed to import, plot and analyze data in R.

# 1. How to get going in R

### 1.1 Installing packages on to your computer

Packages contain libraries with data, functions, code etc. You want to install packages at the beginning of your script. They stay on your computer, even when you close your R session.R will inform you, when you attempt to code a function, for which you do not have the package for. Packages can also be installed via the Install button within the Packages rider on the bottom right corner or over the Tools button.

```{r, eval=FALSE}
install.packages("tidyverse")
install.packages("dplyr")
install.packages("ggpubr")
install.packages("GGally")
install.packages("skimr")
install.packages("ggplot2")
install.packages("ggfortify")
install.packages("ggfortify")
```

### 1.2 Loading a library into your working file

When you have installed a package, you have to load it into your current R session. This has to be done every time you open R new. This can also be done by checking the boxes in the Packages rider.

```{r, message=FALSE, warning=FALSE}
library(tidyverse)
library(dplyr)
library(readr)
library(ggplot2)
library(ggpubr)
library(GGally)
library(skimr)
library(ggplot2)
library(ggfortify)
```

### 1.3 How to get information on packages

```{r, eval = FALSE}
?dplyr
??dplyr
```

# 2. How to import data into R

In R, the main goal is to work with data. So we have to import data into the session. This can be done either with data files from your computer or other source, or (for training purposes) you can import data from the packages. This can be very valuable to learn how to wrangle the data and how to make plots.

### 2.1 Importing and looking at data from a CSV file from your Computer

```{r, eval=FALSE}
getwd() #get the current working directory
setwd() #change working directory to somwhere else
```

```{r, , message=FALSE, warning=FALSE}

bodyfat <- read_csv("C:/Users/vf22a541/OneDrive - Universitaet Bern/Bioinformatics Tutorial/datasets/bodyfat.csv") #Imports the data frame from a location on your computer with readr function

View(bodyfat) #Display the data frame

str(bodyfat) #Display dimensions of data frame and types of variables

summary(bodyfat) #Types of Variables and little statistic

head(bodyfat) #Displays the first few rows of the data frame

skim(bodyfat) #Shows very nice summary of the data with distribution
```

### 2.2 Open data from a package

```{r}
# Browse built-in datasets in R
data()
```

```{r}
#Shows dataset in console
mtcars
```

```{r}
#Shows the first few rows in dataset
head(mtcars)
```

```{r}
#select columns in a dataframe using their names
select(mtcars, hp)
```

```{r}
#transform table into data frame if necessary
data("HairEyeColor")
df <- as.data.frame(HairEyeColor)
#?HairEyeColor
```

### 2.3 Organize the data in a way that it is useful for further analysis

#### Subset columns using their names and types

```{r}
select(mtcars, c(mpg, wt, cyl)) #either just to look at it (displayed in the script)
mtcars_2 <- select(mtcars, mpg, wt, cyl) #or assign it to a new object
select(mtcars, 2:4)

```

#### Create, modify, and delete columns

```{r}
mutate(mtcars, mpg_log = log(mpg)) #add a column with the mpg variable log transformed
```

#### Subset rows using column values

```{r}
filter(mtcars, mpg == max(mpg)) #just to find out whats the max
mtcars_over20mpg <- filter(mtcars, mpg >= 20) #or again assign to a new object
mtcars %>% filter(disp > mean(disp, na.rm = T))
```

#### Arrange rows by column values

```{r}
max_cyl <- arrange(mtcars, desc(cyl)) #arrange a colum in descending order
```

# 3. Making plots in R

Quick plots with the plot(), hist() function is very easy and quick. The plots reach a creative limit, where other packages such as ggplot2 or gpubr will produce much nicer graphs for puplications.

```{r}

hist(bodyfat$density) #A histogram of the bodyfat data

hist(mtcars$mpg) # A histogram of the mtcars data
plot(mtcars$mpg, mtcars$hp) # A Scatterplot of the mtcars data

hist(mtcars$mpg) # A histogram of the mtcars data
plot(mtcars$mpg, mtcars$hp) # A Scatterplot of the mtcars data
plot(mtcars$mpg, mtcars$disp)

# Transformation of variables
mtcars <- mtcars %>% mutate(disp_log = log(disp))
plot(mtcars$mpg, mtcars$disp_log)

# Continous variables mpg and wt
plot(x = mtcars$mpg, y = mtcars$wt)
hist(mtcars$mpg)
hist(mtcars$wt)

#plotting all variables against each other gives a base for hypothesis
ggpairs(mtcars)

```
